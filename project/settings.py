"""
Django settings for project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from os import environ
from app.services.ip import get_client_ip

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

MEDIA_URL = 'uploads/'
MEDIA_ROOT = environ.get('MEDIA_ROOT') or BASE_DIR / 'uploads'

LOCALE_PATHS = [environ.get('LOCALE_PATH') or BASE_DIR / 'locales']

GRAPPELLI_ADMIN_TITLE = 'Logos Gospel Web'
GRAPPELLI_CLEAN_INPUT_TYPES = False

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = environ.get('SECRET_KEY') or 'django-insecure-@e-x0)96^9l^&_)0j!cc0r#%o^4^2s%c%kq3vh0#!s3sznbsej'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = environ.get('MODE') != 'production'

ALLOWED_HOSTS = list(filter(None, (environ.get('ALLOWED_HOSTS') or '').split(',')))

CSRF_TRUSTED_ORIGINS = [s + x for x in ALLOWED_HOSTS for s in ('http://', 'https://')]

SECURE_CROSS_ORIGIN_OPENER_POLICY = None

RATELIMIT_IP_META_KEY = get_client_ip

# Application definition

INSTALLED_APPS = [
    'pipeline',
    'app.apps.Config',
    'grappelli',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_cleanup.apps.CleanupConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'default': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] [{levelname}] {message}',
            'style': '{',
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'default',
        },
    },
    'loggers': {
        'django': {
            'level': 'INFO',
            'handlers': ['console'],
            'propagate': False,
        },
    },
}

if environ.get('ERROR_LOG_FILE'):
    LOGGING['handlers']['file'] = {
        'level': 'ERROR',
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': environ.get('ERROR_LOG_FILE'),
        'maxBytes': 1024 * 1024 * 100,
        'formatter': 'default',
    }
    LOGGING['loggers']['django']['handlers'].append('file')


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASE_ROUTERS = ('app.dbrouter.DbRouter',)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': environ.get('DB_ROOT') or BASE_DIR / 'db.sqlite3',
    },
    'contact': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': environ.get('CONTACT_DB_ROOT') or BASE_DIR / 'contact.sqlite3',
    },
    'analytics': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': environ.get('ANALYTICS_DB_ROOT') or BASE_DIR / 'analytics.sqlite3',
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Hong_Kong'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = environ.get('STATIC_ROOT') or BASE_DIR / 'static'
STATICFILES_STORAGE = 'pipeline.storage.PipelineStorage'
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'pipeline.finders.PipelineFinder',
)

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django Pipeline

PIPELINE = {
    'SASS_BINARY': 'pysassc -t compressed',
    'COMPILERS': (
       'pipeline.compilers.sass.SASSCompiler',
    ),
    'CSS_COMPRESSOR': 'pipeline.compressors.NoopCompressor',
    'JS_COMPRESSOR': 'pipeline.compressors.jsmin.JSMinCompressor',
    'STYLESHEETS': {
        'site': {
            'source_filenames': (
                'styles/index.scss',
            ),
            'output_filename': 'styles/index.css',
        },
        'richtext': {
            'source_filenames': (
                'styles/richtext.scss',
            ),
            'output_filename': 'styles/richtext.css',
        },
    },
    'JAVASCRIPT': {
        'site': {
            'source_filenames': (
                'scripts/polyfill.js',
                'scripts/common.js',
                'scripts/constants.js',
                'scripts/events.js',
                'scripts/drag.js',
                'scripts/header.js',
                'scripts/slideshow.js',
                'scripts/rangeslider.js',
                'scripts/audioplayer.js',
                'scripts/sidebar.js',
                'scripts/qrcode.js',
                'scripts/toolbar.js',
            ),
            'output_filename': 'scripts/index.js',
        }
    },
}
